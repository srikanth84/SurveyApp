#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fielder
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class LoginView : LoginViewBase
{

#line hidden

#line 1 "LoginView.cshtml"
public LoginDetails Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<html>\r\n\t<head>\r\n\t\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"jquery.mobile-1.4.5.min.css\"");

WriteLiteral(" />\r\n\t\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"style.css\"");

WriteLiteral(" />\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.jsf\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.mobile-1.4.5.jsf\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n\t\t\t\r\n\t\t\t$(function() {\t\t\t\t\r\n\t\t\t    $(\'input[type=text]\').focus(function() {\t\t\t" +
"    \t\r\n\t\t    \t if ($(this).val() == \'Username\' || $(this).val() == \'Password\') {" +
"\r\n\t\t\t      $(this).val(\'\');\r\n\t\t\t      }\r\n\t\t      \t});\r\n\t\t      \t$(\'#username\').b" +
"lur(function() {\t\t\t    \t\r\n\t\t\t      if ($(this).val() == \'\') {\r\n\t\t\t    \t$(this).v" +
"al(\'Username\');\t  \t\r\n\t\t\t      }\r\n\t\t      \t});\r\n\t\t      \t$(\'#password\').blur(func" +
"tion() {\t\t\t    \t\r\n\t\t\t      if ($(this).val() == \'\') {\r\n\t\t\t    \t$(this).val(\'Pass" +
"word\');\t  \t\r\n\t\t\t      }\r\n\t\t      \t});\r\n\t\t\t      \r\n\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t// " +
"This javascript method calls C# by setting the browser \r\n\t\t\t// to a URL with a c" +
"ustom scheme that is registered in C#.  \r\n\t\t\t// All values are sent to C# as par" +
"t of the querystring  \r\n\t\t\tfunction InvokeCSharpWithFormValues(elm, vehicleId) {" +
"\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar qs = \"\";\r\n\t\t\t\tvar elms = elm.form.elements;\r\n\r\n\t\t\t\tfor (var i " +
"= 0; i < elms.length;i++) {\r\n\t\t\t\t\tqs += \"&\" + elms[i].name + \"=\" + elms[i].value" +
";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tqs += \"&vehicleId=\" + vehicleId;\r\n\r\n\t\t\t\tif (elms.length > 0) \r\n\t" +
"\t\t\t\tqs = qs.substring(1);\r\n\r\n\t\t\t\tlocation.href = \"hybrid:\" + elm.name + \"?\" + qs" +
";\r\n\t\t\t}\r\n\r\n\t\t\t// This javascript method is called from C#\r\n\t\t\tfunction SetLabelT" +
"ext(text) {\t\t\t\t\r\n\t\t\t\tvar elm =  $(\"#label\"); //document.getElementById(\'label\');" +
"\r\n\t\t\t\t//alert(elm);\r\n\t\t\t\telm.text(text);\r\n\t\t\t\t$(\"#capture\").attr(\"src\", text);\r\n" +
"\t\t\t}\r\n\r\n\t\t\t// This javascript method is called from C# to set image in the img t" +
"ag\r\n\t\t\tfunction SetImage(text) {\t\t\t\t\t\t\t\t\r\n\t\t\t\t$(\"#capture\").attr(\"src\", text);\r\n" +
"\t\t\t}\r\n\r\n\t\t\tfunction LogMeIn(elm) {\r\n\t\t\t\tcheckLoginInfo($(\'#username\').val(), $(\'" +
"#password\').val(), elm);\r\n\t\t\t}\r\n\r\n\t\t\tfunction checkLoginInfo(username, password," +
" elm){\r\n\t\t\t\t// Using the core $.ajax() method\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t \r\n\t\t\t\t    // T" +
"he URL for the request\r\n\t\t\t\t    url: \"http://88.208.211.53:3000/login/\" + userna" +
"me + \"/\" + password,\t\t\t\t \r\n\t\t\t\t \r\n\t\t\t\t    // Whether this is a POST or GET reque" +
"st\r\n\t\t\t\t    type: \"GET\",\r\n\t\t\t\t \r\n\t\t\t\t    // The type of data we expect back\r\n\t\t\t" +
"\t    dataType : \"json\",\r\n\t\t\t\t \r\n\t\t\t\t    // Code to run if the request succeeds;\r" +
"\n\t\t\t\t    // the response is passed to the function\r\n\t\t\t\t    success: function( j" +
"son ) {\t\t\t\t    \t\r\n\t\t\t\t    \tconsole.log(\"reached server - \" + json);\r\n\t\t\t\t       " +
" if (json != false) {\r\n\t\t\t\t        \t\tconsole.log(\"login success\");\r\n\t\t\t\t        " +
"\t\tInvokeCSharpWithFormValues(elm, json);\r\n\t\t\t\t        \t}\r\n\t\t\t\t    },\r\n\t\t\t\t \r\n\t\t\t" +
"\t    // Code to run if the request fails; the raw request and\r\n\t\t\t\t    // status" +
" codes are passed to the function\r\n\t\t\t\t    error: function( xhr, status, errorTh" +
"rown ) {\r\n\t\t\t\t        //alert( \"Sorry, there was a problem!\" );\r\n\t\t\t\t        con" +
"sole.log( \"Error: \" + errorThrown );\r\n\t\t\t\t        //console.log( \"Status: \" + st" +
"atus );\r\n\t\t\t\t        //console.dir( xhr );\r\n\t\t\t\t    },\r\n\t\t\t\t \r\n\t\t\t\t    // Code t" +
"o run regardless of success or failure\r\n\t\t\t\t    complete: function( xhr, status " +
") {\r\n\t\t\t\t       //alert( \"The request is complete!\" );\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\t\t\t}" +
"\r\n\r\n\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t\t<div");

WriteLiteral(" data-role=\"page\"");

WriteLiteral(" data-theme=\"a\"");

WriteLiteral(">\r\n\t\t\t<form>\r\n\t\t\t\t\r\n\t\t\t\t<div");

WriteLiteral(" data-role=\"content\"");

WriteLiteral(">\r\n\r\n\t\t\t\t\t<img");

WriteLiteral(" src=\"logo_90.png\"");

WriteLiteral(" width=\"200px\"");

WriteLiteral(" height=\"40px\"");

WriteLiteral(" />\r\n\t\t\t\t\t<h4");

WriteLiteral(" id=\"label\"");

WriteLiteral(">Enter Login Details:</h4>\r\n\r\n\t\t\t\t\t<input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"username\"");

WriteLiteral(" name=\"textbox\"");

WriteLiteral(" value=\"Username\"");

WriteLiteral("/>\r\n\t\t\t\t\t<input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"password\"");

WriteLiteral(" name=\"textbox\"");

WriteLiteral(" value=\"Password\"");

WriteLiteral("/>\r\n\t\t\t\t\t<input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" name=\"LoginSuccess\"");

WriteLiteral(" value=\"Login\"");

WriteLiteral(" onclick=\"LogMeIn(this)\"");

WriteLiteral(" />\t\t\t\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t</body>\r\n</html>\t\r\n\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class LoginViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
