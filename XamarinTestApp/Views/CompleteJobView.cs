#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fielder
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class CompleteJobView : CompleteJobViewBase
{

#line hidden

#line 1 "CompleteJobView.cshtml"
public JobData Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<html>\r\n\t<head>\r\n\t\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"jquery.mobile-1.4.5.min.css\"");

WriteLiteral(" />\r\n\t\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"signature-pad.css\"");

WriteLiteral(" />\r\n\t\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"style.css\"");

WriteLiteral(" />\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.jsf\"");

WriteLiteral("></script>\r\n\t\t<!--<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.mobile-1.4.5.jsf\"");

WriteLiteral("></script>-->\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.linq.min.js\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"signature_pad.js\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n\t\t\t\r\n\r\n\t\t\tvar wrapper, clearButton, saveButton, canvas, signaturePad;\r\n\t\t\tvar " +
"signDataSer;\r\n\t\t\tvar jobsJsonString = \"");


#line 16 "CompleteJobView.cshtml"
                     Write(Model.JSON);


#line default
#line hidden
WriteLiteral("\";\r\n\t\t\tvar job=null;\r\n\t\t\t$(function() {\t\t\t\t\r\n\t\t\t\tconsole.log(\"complete\");\r\n\r\n\t\t\t\t" +
"wrapper = document.getElementById(\"signature-pad\");\r\n\t\t\t    clearButton = wrappe" +
"r.querySelector(\"[data-action=clear]\");\r\n\t\t\t    saveButton = wrapper.querySelect" +
"or(\"[data-action=save]\");\r\n\t\t\t    canvas = wrapper.querySelector(\"canvas\");\r\n\r\n\t" +
"\t\t    if (jobsJsonString != \"\") {\t\r\n\t\t\t     \tconsole.log(jobsJsonString);\t\t\t\t\r\n\t" +
"\t\t\t\tjobsJsonString = jobsJsonString.replace(/&quot;/g, \'\"\');\r\n\t\t\t\t\tjob = JSON.pa" +
"rse(jobsJsonString);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twindow.onresize = resizeCanvas;\r\n\t\t\t\tresizeCa" +
"nvas();\r\n\t\t\t\t//alert(\"s\");\r\n\r\n\t\t\t\tsignaturePad = new SignaturePad(canvas);\r\n\t\t\t\t" +
"//alert(\"k\");\r\n\t\t\t\tclearButton.addEventListener(\"click\", function (event) {\r\n\t\t\t" +
"\t    signaturePad.clear();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tsaveButton.addEventListener(\"click\", " +
"function (event) {\r\n\t\t\t\t    if (signaturePad.isEmpty()) {\r\n\t\t\t\t        alert(\"Pl" +
"ease provide signature first.\");\r\n\t\t\t\t    } else {\r\n\t\t\t\t        //window.open(si" +
"gnaturePad.toDataURL());\r\n\t\t\t\t        InvokeCSharpWithElementValues(\"GotSignatur" +
"e\", canvas.toDataURL(\'image/jpeg\', 0.5));\r\n\t\t\t\t        //signDataSer = ;\r\n\t\t\t\t  " +
"  }\r\n\t\t\t\t});\r\n\t\t\t });\r\n\r\n\r\n\r\n\t\t\t// Adjust canvas coordinate space taking into ac" +
"count pixel ratio,\r\n\t\t\t// to make it look crisp on mobile devices.\r\n\t\t\t// This a" +
"lso causes canvas to be cleared.\r\n\t\t\tfunction resizeCanvas() {\r\n\t\t\t    // When z" +
"oomed out to less than 100%, for some very strange reason,\r\n\t\t\t    // some brows" +
"ers report devicePixelRatio as less than 1\r\n\t\t\t    // and only part of the canva" +
"s is cleared then.\r\n\t\t\t    var ratio =  Math.max(window.devicePixelRatio || 1, 1" +
");\r\n\t\t\t    canvas.width = canvas.offsetWidth * ratio;\r\n\t\t\t    canvas.height = ca" +
"nvas.offsetHeight * ratio;\r\n\t\t\t    canvas.getContext(\"2d\").scale(ratio, ratio);\r" +
"\n\t\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// This javascript method calls C# by setting the browser \r\n" +
"\t\t\t// to a URL with a custom scheme that is registered in C#.  \r\n\t\t\t// All value" +
"s are sent to C# as part of the querystring  \r\n\t\t\tfunction InvokeCSharpWithFormV" +
"alues(elm) {\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar qs = \"\";\r\n\t\t\t\tvar elms = elm.form.elements;\r\n\r\n\t\t\t" +
"\tfor (var i = 0; i < elms.length;i++) {\r\n\t\t\t\t\tqs += \"&\" + elms[i].name + \"=\" + e" +
"lms[i].value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (elms.length > 0) \r\n\t\t\t\t\tqs = qs.substring(1);\r\n\r" +
"\n\t\t\t\tlocation.href = \"hybrid:\" + elm.name + \"?\" + qs;\r\n\t\t\t}\r\n\r\n\t\t\tfunction Invok" +
"eCSharpWithElementValues(methodName, signData) {\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar qs = \"\";\r\n\t\t\t\t" +
"qs += \"_id=");


#line 91 "CompleteJobView.cshtml"
           Write(Model._id);


#line default
#line hidden
WriteLiteral("&signatureLabel=");


#line 91 "CompleteJobView.cshtml"
                                       Write(Model.SignatureLabel);


#line default
#line hidden
WriteLiteral("\";\r\n\t\t\t\t//signData = signData.replace(/=/g, \"|\");\r\n\t\t\t\t//signData = signData.repl" +
"ace(/\\+/g, \"$\");\r\n\t\t\t\tvar lbl = \"");


#line 94 "CompleteJobView.cshtml"
           Write(Model.SignatureLabel);


#line default
#line hidden
WriteLiteral(@""";
				var currentdate = new Date(); 
				var datetime = currentdate.getDate() + ""/""
	                + (currentdate.getMonth()+1)  + ""/"" 
	                + currentdate.getFullYear() + "" ""  
	                + currentdate.getHours() + "":""  
	                + currentdate.getMinutes() + "":"" 
	                + currentdate.getSeconds();
				if (lbl == ""Customer"") {
					job.completed = true;
					job.keyvalue.push({""key"": ""CustomerSignDateTime"", ""value"": datetime});
					qs += ""&json="" + JSON.stringify(job);
					qs += ""&sign="" + encodeURI(signData);
					location.href = ""hybrid:"" + methodName + ""?"" + qs;						
				} 
				else {
					job.keyvalue.push({""key"": ""InstallerSignDateTime"", ""value"": datetime});
					qs += ""&json="" + JSON.stringify(job);
					qs += ""&sign="" + encodeURI(signData);
					//alert(qs);
					console.log(qs);
					location.href = ""hybrid:"" + methodName + ""?"" + qs;
				}
			}				

		</script>
	</head>
	<body>		
		<div");

WriteLiteral(" data-role=\"page\"");

WriteLiteral(" data-theme=\"b\"");

WriteLiteral(">\t\t\r\n\t\t\t<input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" value=\"\"");

WriteLiteral(">\r\n\t\t\t<div");

WriteLiteral(" data-role=\"header\"");

WriteLiteral(">\r\n\t\t\t\t<h1>Job - ");


#line 125 "CompleteJobView.cshtml"
         Write(Model.JobID);


#line default
#line hidden
WriteLiteral("</h1>\t\t\t    \r\n\t\t\t</div>\t\r\n\t\t\t<form>\r\n\t\t\t\t\r\n\t\t\t\t<div");

WriteLiteral(" data-role=\"content\"");

WriteLiteral(">\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t<div");

WriteLiteral(" id=\"signature-pad\"");

WriteLiteral(" class=\"m-signature-pad ui-content\"");

WriteLiteral(" role=\"main\"");

WriteLiteral(" style=\"margin-bottom: 200px;\"");

WriteLiteral(">\r\n\t\t\t\t\t\t<h2>");


#line 131 "CompleteJobView.cshtml"
     Write(Model.SignatureLabel);


#line default
#line hidden
WriteLiteral(" Signature</h2>\r\n\t\t\t\t\t\t<p></p>\r\n\t\t\t\t\t    <div");

WriteLiteral(" class=\"m-signature-pad--body\"");

WriteLiteral(">\r\n\t\t\t\t\t      <canvas></canvas>\r\n\t\t\t\t\t    </div>\t\t\t\t\t\t\r\n\t\t\t\t\t    <div");

WriteLiteral(" class=\"m-signature-pad--footer\"");

WriteLiteral(">\t\t\t\t\t\t\t       \t\t\t     \r\n\t\t\t\t\t    \t<h3>Please Sign Above </h3>\r\n\t\t\t\t\t      <input" +
"");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"button clear\"");

WriteLiteral(" data-action=\"clear\"");

WriteLiteral(" value=\"Clear\"");

WriteLiteral(" />\r\n\t\t\t\t\t      <input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"button save\"");

WriteLiteral(" data-action=\"save\"");

WriteLiteral(" value=\"Sign Off\"");

WriteLiteral(" />\r\n\t\t\t\t\t    </div>\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t</div>\t\t\t\t\t\t\t\r\n\r\n\t\t\t</form>\r\n\t\t</div>\t\t\t" +
"\t\r\n\t</body>\r\n</html>\t\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class CompleteJobViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
