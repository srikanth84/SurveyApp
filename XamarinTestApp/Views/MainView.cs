#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fielder
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class MainView : MainViewBase
{

#line hidden

#line 1 "MainView.cshtml"
public Model1 Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<html>\r\n\t<head>\r\n\t\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"jquery.mobile-1.4.5.min.css\"");

WriteLiteral(" />\r\n\t\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"style.css\"");

WriteLiteral(" />\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.jsf\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.mobile-1.4.5.jsf\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"jquery.linq.min.js\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"socket.io.js\"");

WriteLiteral("></script>\r\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n\t\t\t\r\n\t\t\tvar Enumerable;\r\n\t\t\tvar jobsJsonString = \"");


#line 13 "MainView.cshtml"
                     Write(Model.JobsJSON);


#line default
#line hidden
WriteLiteral("\";\r\n\t\t\tvar jobsList = null;\r\n\t\t\tvar jobJsonString = \"");


#line 15 "MainView.cshtml"
                    Write(Model.JSON);


#line default
#line hidden
WriteLiteral("\";\r\n\t\t\tvar job=null;\r\n\t\t\tvar socket = io.connect(\'http://88.208.211.53:3000/\');\t\t" +
"\r\n\t\t\tsocket.on(\'refreshMobile\', function (data) {\r\n\t\t        console.log(\"refres" +
"hMobileData\");\r\n\t\t        //alert(\"refresh\");\r\n\t\t        GetJobList(0);\r\n\t\t    }" +
");\r\n\r\n\t\t    socket.on(\'reconnect\', function (data) {\r\n\t\t        GetJobList(0);\r\n" +
"\t\t    });\r\n\t\t    \t\r\n\t\t\t$(function() {\t\t\t\t\r\n\t\t\t\tconsole.log(\"start2\");\r\n\t\t\t\tEnume" +
"rable = $.Enumerable;\t\t\t\r\n\t\t\t\tif (jobsJsonString != \"\") {\t\t\t\t     \t\r\n\t\t\t     \tjo" +
"bsJsonString = jobsJsonString.replace(/\\n/g, \' \');\r\n\t\t\t\t\tjobsJsonString = jobsJs" +
"onString.replace(/&quot;/g, \'\"\');\r\n\t\t\t\t\tjobsList = JSON.parse(jobsJsonString);\r\n" +
"\t\t\t\t}\r\n\t\t\t\tif (jobJsonString != \"\") {\t\t\t\t     \t\r\n\t\t\t     \tjobJsonString = jobJso" +
"nString.replace(/\\n/g, \' \');\r\n\t\t\t\t\tjobJsonString = jobJsonString.replace(/&quot;" +
"/g, \'\"\');\r\n\t\t\t\t\tjob = JSON.parse(jobJsonString);\r\n\t\t\t\t\tif (job.stage == 1) {\r\n\t\t" +
"\t\t\t\tjobsList = Enumerable.From(jobsList).Where(function(x) {return x._id != job." +
"_id}).ToArray();\r\n\t\t\t\t\t//jobList.push(job);\r\n\t\t\t\t\t\tjob.stage = 2;\r\n\t\t\t\t\t\tPostJob" +
"(job);\r\n\t\t\t\t\t}\r\n\t\t\t\t}      \r\n\t\t       GetJobList(0);\r\n\t\t\t });\r\n\r\n\t\t\t// This java" +
"script method calls C# by setting the browser \r\n\t\t\t// to a URL with a custom sch" +
"eme that is registered in C#.  \r\n\t\t\t// All values are sent to C# as part of the " +
"querystring  \r\n\t\t\tfunction InvokeCSharpWithFormValues(elm) {\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar qs" +
" = \"\";\r\n\t\t\t\tvar elms = elm.form.elements;\r\n\r\n\t\t\t\tfor (var i = 0; i < elms.length" +
";i++) {\r\n\t\t\t\t\tqs += \"&\" + elms[i].name + \"=\" + elms[i].value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (" +
"elms.length > 0) \r\n\t\t\t\t\tqs = qs.substring(1);\r\n\r\n\t\t\t\tlocation.href = \"hybrid:\" +" +
" elm.name + \"?\" + qs;\r\n\t\t\t}\r\n\r\n\t\t\tfunction InvokeCSharpWithElementValues(elm, _i" +
"d) {\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar qs = \"\";\r\n\t\t\t\tqs += \"jobId=&_id=\" + _id;\r\n\t\t\t\tqs += \"&json" +
"=\" + JSON.stringify(Enumerable.From(jobsList).Where(function(x) {return x._id ==" +
" _id}).First());\r\n\t\t\t\tlocation.href = \"hybrid:\" + elm.name + \"?\" + qs;\r\n\t\t\t}\r\n\r\n" +
"\t\t\t// This javascript method is called from C#\r\n\t\t\tfunction SetLabelText(text) {" +
"\t\t\t\t\r\n\t\t\t\tvar elm =  $(\"#label\"); //document.getElementById(\'label\');\r\n\t\t\t\t//ale" +
"rt(elm);\r\n\t\t\t\telm.text(text);\r\n\t\t\t}\r\n\r\n\t\t\tfunction updateTable() {\r\n\r\n\t\t\t    //v" +
"ar tableObject = jQuery.parseJSON(stringifiedTable);\r\n\t\t\t    var tbody = $(\"#tab" +
"leJobs > tbody\");\r\n\t\t\t    var rows = Enumerable.From(jobsList).Where(\"$.stage ==" +
" 0\").OrderBy(\"$.dateStart\").ToArray(); //Enumerable.From(stringifiedTable).Where" +
"(function(x) {return x.completed == false}).ToArray();\r\n\r\n\t\t\t    var html = \"\";\r" +
"\n\r\n\t\t\t    tbody.empty();\r\n\t\t\t    $(\"#tableJobs\").table(\"refresh\");\r\n\r\n\t\t\t    for" +
" (var i = 0; i < rows.length; i++) {\r\n\t\t\t        html = html + \"<tr>\\n\";\r\n\t\t\t   " +
"     console.log(rows[i].postcode);\r\n\t\t\t        //var postcode = rows[i].keyvalu" +
"e != \"\" ? Enumerable.From(rows[i].keyvalue).Where(function(x) {return x.key == \"" +
"Postcode\"}).First().value : \"\";\r\n\t\t\t        //console.log(postcode);\r\n\t\t\t       " +
" //for (var j = 0; j < rows[i].length; j++) {\r\n\t\t\t        //console.log(\"onclick" +
"=\'InvokeCSharpWithElementValues(this,\" + rows[i].jobId + \",\" + rows[i]._id + \")\'" +
"\");\r\n\t\t\t        html = html + \"<td><a name=\'openJob\' href=\'#\' onclick=InvokeCSha" +
"rpWithElementValues(this,\'\" + rows[i]._id + \"\')>\" + rows[i].dateStart + \"</a></t" +
"d>\\n\";\r\n\t\t\t        html = html + \"<td>\" + rows[i].postcode + \"</td>\\n\";\r\n\t\t\t    " +
"    html = html + \"<td>\" + rows[i].telephone + \"</td>\\n\";\r\n\t\t\t        html = htm" +
"l + \"<td>\"+ rows[i].title + \" \" + rows[i].firstName + \" \" + rows[i].lastName + \"" +
"</td>\\n\";\r\n\t\t\t        html = html + \"<td>\" + rows[i].assignedUser + \"</td>\\n\";\r\n" +
"\t\t\t        //}\r\n\t\t\t        html = html + \"</tr>\\n\\n\";\r\n\t\t\t    }\t\t\t   \r\n\t\t\t    tb" +
"ody.append(html);\r\n\t\t\t    $(\"#tableJobs\").table(\"refresh\");\r\n\r\n\t\t\t}\t\t\t \r\n\t\t\t    " +
"\t\t\r\n\r\n\t\t\tfunction SaveJobsJSON(methodName, json) {\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar qs = \"\";\r\n\t\t" +
"\t\tqs += \"json=\" + json\r\n\r\n\t\t\t\tlocation.href = \"hybrid:\" + methodName + \"?\" + qs;" +
"\r\n\t\t\t}\r\n\r\n\t\t\tfunction PostJob(j) {\r\n\t\t\t\tconsole.log(\"post - \" + JSON.stringify(j" +
"));\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\t\t  method: \"POST\",\r\n\t\t\t\t\t\t  url: \"http://88.208.211.53:3" +
"000/add/LeadGen\",\r\n\t\t\t\t\t\t  contentType : \"application/json\",\r\n\t\t\t\t\t\t  data: JSON" +
".stringify(j),\r\n\t\t\t\t\t\t  dataType: \'json\'\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t  .done(function( msg )" +
" {\r\n\t\t\t\t\t  \tconsole.log(msg);\t\t\t\t\t    \r\n\t\t\t\t\t  })\r\n\t\t\t\t\t  .fail(function() {\r\n\t\t" +
"\t\t\t    console.log( \"error uploading job\" );\r\n\t\t\t\t\t    j.stage = 1;\r\n\t\t\t\t\t    jo" +
"bsList.push(j);\r\n\t\t\t\t\t    updateTable();\r\n\t\t\t\t\t  });\r\n\t\t\t}\t\t\t\t\t\t  \t\r\n\r\n\t\t\tfuncti" +
"on UpdateJSONList(json) {\r\n\t\t\t\tif (jobsList != null) {\r\n\t\t    \t\tfor (var i = 0; " +
"i < json.length; i++) {\r\n\t\t    \t\t\tvar o = json[i];\r\n\t\t    \t\t\tvar m = false;\r\n\t  " +
"  \t\t\t\tfor (var j = 0; j < jobsList.length; j++) {\t    \t\t\t\t\t\r\n\t\t    \t\t\t\tvar p = j" +
"obsList[j];\r\n\t\t    \t\t\t\tif (p._id == o._id) {\r\n\t\t    \t\t\t\t\tm = true;\r\n\t\t    \t\t\t\t\t/" +
"/jobsList[j] = p;\r\n\t\t    \t\t\t\t\tbreak;\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\tif (m ==" +
" false) {\t\t    \t\t\t\t\r\n\t\t    \t\t\t\tjobsList.push(o);\t\t\t\t    \t\t\t\r\n\t    \t\t\t\t}\r\n\t\t    \t" +
"\t}\t\t\t\t\t\t\t\r\n\t\t    \t}\r\n\t\t    \telse {\r\n\t\t    \t\tjobsList = json;\r\n\t\t    \t}\r\n\r\n\t\t    " +
"\tfor (var i = 0; i< jobsList.length; i++) {\t\t    \t\t\r\n\t\t    \t\tif (jobsList[i].sta" +
"ge == 1) {\t\t    \t\t\t\r\n\t\t    \t\t\tvar tempJob = jobsList[i];\r\n\t\t    \t\t\tjobsList.spli" +
"ce(i , 1);\r\n\t\t    \t\t\ttempJob.stage = 2;\r\n\t\t    \t\t\ti = i - 1;\r\n\t\t\t\t\t\tPostJob(temp" +
"Job);\r\n\t\t\t\t\t}\r\n\t\t    \t}\r\n\t\t    \tSaveJobsJSON(\"saveJSON\", JSON.stringify(jobsList" +
"));\r\n\t\t\t}\r\n\r\n\t\t\tfunction GetJobList(driverId){\r\n\t\t\t\t// Using the core $.ajax() m" +
"ethod\r\n\t\t\t\tvar json = null;\r\n\t\t\t\tconsole.log(\"http://88.208.211.53:3000/get/lead" +
"gensByUser/");


#line 177 "MainView.cshtml"
                                                          Write(Model.VehicleId);


#line default
#line hidden
WriteLiteral("\");\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t \r\n\t\t\t\t    // The URL for the request\r\n\t\t\t\t    url: \"http:" +
"//88.208.211.53:3000/get/leadgensByUser/");


#line 181 "MainView.cshtml"
                                                       Write(Model.VehicleId);


#line default
#line hidden
WriteLiteral(@""",			 
				 
				    // Whether this is a POST or GET request
				    type: ""GET"",
				 
				    // The type of data we expect back
				    dataType : ""json"",
				 
				    // Code to run if the request succeeds;
				    // the response is passed to the function
				    success: function( obj ) {
				    	json = obj;
				    	//var jobsJSON = JSON.stringify(obj);
				    	//callMainActivity.setResult(JSON.stringify(json));
				    },
				 
				    // Code to run if the request fails; the raw request and
				    // status codes are passed to the function
				    error: function( xhr, status, errorThrown ) {
				        //alert( ""Sorry, there was a problem!"" );
				        console.log( ""Error: "" + errorThrown );
				        //console.log( ""Status: "" + status );
				        //console.dir( xhr );
				    },
				 
				    // Code to run regardless of success or failure
				    complete: function( xhr, status ) {
				       //alert( ""The request is complete!"" );
				       if (json != null) {
				       		UpdateJSONList(json);
				       		//jobsList = json;
				       }
				       /*if (job != null) {
					       var arr = new Array();
							arr.push(job);
							UpdateJSONList(arr);
						}*/
				       console.log(JSON.stringify(jobsList));
				       updateTable();
				    }
				});
			}


		</script>
	</head>
	<body>
		<div");

WriteLiteral(" data-role=\"page\"");

WriteLiteral(" data-theme=\"b\"");

WriteLiteral(">\r\n\t\t\t<div");

WriteLiteral(" data-role=\"header\"");

WriteLiteral(">\r\n\t\t\t    <a");

WriteLiteral(" name=\"Refresh\"");

WriteLiteral(" onclick=\"GetJobList(0)\"");

WriteLiteral(" href=\"#\"");

WriteLiteral(" class=\"ui-btn-right ui-btn ui-btn-b ui-btn-inline ui-mini ui-corner-all ui-btn-i" +
"con-right ui-icon-refresh\"");

WriteLiteral(">Sync</a>\r\n\t\t\t</div>\r\n\t\t\t<form>\r\n\t\t\t\t\r\n\t\t\t\t<div");

WriteLiteral(" data-role=\"content\"");

WriteLiteral(">\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t<!--<input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" name=\"openJob\"");

WriteLiteral(" value=\"Create New Lead\"");

WriteLiteral(" onclick=\"InvokeCSharpWithElementValues(this, \'\', \'\')\"");

WriteLiteral(" />-->\r\n\t\t\t\t\t<h3");

WriteLiteral(" id=\"label\"");

WriteLiteral(">");


#line 236 "MainView.cshtml"
               Write(Model.Text);


#line default
#line hidden
WriteLiteral("</h3>\r\n\t\t\t\t\t<table");

WriteLiteral(" data-role=\"table\"");

WriteLiteral(" id=\"tableJobs\"");

WriteLiteral(" data-mode=\"columntoggle\"");

WriteLiteral(" class=\"ui-responsive table-stroke miniFont\"");

WriteLiteral(">\r\n\t\t\t\t     <thead>\r\n\t\t\t\t       <tr>\r\n\t\t\t\t         <th");

WriteLiteral(" data-priority=\"1\"");

WriteLiteral(">Date</th>\r\n\t\t\t\t         <th>Postcode</th>\r\n\t\t\t\t         <th");

WriteLiteral(" data-priority=\"1\"");

WriteLiteral(">Telephone</th>\r\n\t\t\t\t         <th");

WriteLiteral(" data-priority=\"1\"");

WriteLiteral("><abbr");

WriteLiteral(" title=\"Client Ref\"");

WriteLiteral(">Client</abbr></th>\r\n\t\t\t\t         <th");

WriteLiteral(" data-priority=\"5\"");

WriteLiteral(">BookedBy</th>\r\n\t\t\t\t       </tr>\r\n\t\t\t\t     </thead>\r\n\t\t\t\t     <tbody>\r\n\t\t\t\t      " +
" \r\n\t\t\t\t     </tbody>\r\n\t\t\t\t   </table>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t</bo" +
"dy>\r\n</html>\t\r\n\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class MainViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
